# #!/bin/zsh
snippet [
	[ ${1} ]
snippet '
	'${1}'
snippet "
	"${1}"
snippet {
	{ ${1} }
snippet notify
	notify { "${1:message}": }
snippet user
	user {
		"${1:nobody}":
		  ensure     => "${2:present}",
			home       => "${3:/var/lib/$1}",
			uid        => "${4:333}",
			gid        => "${5:$4}",
			comment    => "${6:$1 account}",
			membership => "${7:minimum}",
			password   => '!!',
			shell      => "${8:/bin/bash, /bin/false, /sbin/nologin, /bin/zsh, /bin/tcsh}",
	}
snippet define
	# Define: ${1:mydefinedtype}
	#
	#   ${2:defined type description goes here.}
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	define $1($3) {
	  ${4:# statements}
	}
	# EOF
snippet #!
	#! /usr/bin/env puppet

snippet if
	if (${1:condition}) {
	  ${2:# statements}
	}
snippet case
	case ${1:$operatingsystem} {
	  ${2:centos, redhat, oel}: {
	    case $lsbmajdistrelease {
	      5: {
	        notice("Unimplemented")
	      }
	      default: {
	        fail("$operatingsystem release $lsbmajdistrelease is not supported")
	      }
	    }
	  }
	  default: {
	    fail("operatingsystem $operatingsystem is not supported")
	  }
	}
snippet class
	# Class: ${1:myclass}
	#
	#   ${2:class description goes here.}
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	class $1 {
	  $module = "$1"
	  notify { "FIXME: ${module} unimplemented": }
	  ${3:# statements}
	}
snippet class::
	# Class: ${1:parentclass}::${2:myclass}
	#
	#   ${3:class description goes here}
	#
	# Parameters:
	#
	# Actions:
	#
	# Requires:
	#
	# Sample Usage:
	#
	class $1::$2 inherits $1 {
	  $module = "$1"
	  $class  = "${module}::$2"
	  notify { "FIXME: ${class} unimplemented": }
	  ${4:# statements}
	}
snippet File
	File {
	  owner => "${1:0}",
	  group => "${2:$1}",
	  mode  => "${3:0644}",
	}
snippet file
	file {
	  "${1:/dev/null}":
	    source  => "puppet:///modules/${module}${2:$1}",
			recurse => "${3:false}"
	}
snippet :
	"${1:title}":${2}
snippet >
	${1:attribute} => ${2:value},${3}
